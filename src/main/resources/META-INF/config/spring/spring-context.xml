<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/task 
        http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
	<!-- 这里支持多种寻址方式：classpath和file  推荐使用file的方式引入，这样可以将配置和代码分离  -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- <value>classpath:META-INF/config/appconfig.properties</value>  
              <value>classpath:META-INF/config/redis.properties</value> -->
              <value>classpath:META-INF/config/spring/database.properties</value>  
            <!--   <value>file:/opt/demo/config/demo-mq.properties</value>  
              <value>file:/opt/demo/config/demo-remote.properties</value>  --> 
            </list>  
        </property>  
    </bean>  
	<!-- 扫描切点类组件 -->
	<context:component-scan base-package="com.mylog.code.aop" />
	<context:component-scan base-package="com.mylog.code.service" />  
	
	

	<bean id="taskExecutor"  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">  
		<property name="corePoolSize" value="5" />  
		<property name="maxPoolSize" value="10" />  
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />  
	</bean>
	
	
	
	<!-- 数据源 -->
	<bean id="sysDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driver}" />

		<!-- 初始化连接大小 -->  
        <property name="initialSize" value="0" />  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20" />  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="5" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
  
  
        <property name="validationQuery"><value>SELECT 1</value></property>   
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
  
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
  
        <!-- 监控数据库 -->  
        <!-- <property name="filters" value="stat" /> -->  
        <property name="filters" value="mergeStat" />  
        <property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>
	<!-- 数据源 -->
	<bean id="logDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc.log.url}" />
		<property name="username" value="${jdbc.log.username}" />
		<property name="password" value="${jdbc.log.password}" />
		<property name="driverClassName" value="${jdbc.log.driver}" />

		<!-- 初始化连接大小 -->  
        <property name="initialSize" value="0" />  
        <!-- 连接池最大使用连接数量 -->  
        <property name="maxActive" value="20" />  
        <!-- 连接池最小空闲 -->  
        <property name="minIdle" value="5" />  
        <!-- 获取连接最大等待时间 -->  
        <property name="maxWait" value="60000" />  
  
  
        <property name="validationQuery"><value>SELECT 1</value></property>   
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
        <property name="testWhileIdle" value="true" />  
  
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="25200000" />  
  
        <!-- 打开removeAbandoned功能 -->  
        <property name="removeAbandoned" value="true" />  
        <!-- 1800秒，也就是30分钟 -->  
        <property name="removeAbandonedTimeout" value="1800" />  
        <!-- 关闭abanded连接时输出错误日志 -->  
        <property name="logAbandoned" value="true" />  
  
        <!-- 监控数据库 -->  
        <!-- <property name="filters" value="stat" /> -->  
        <property name="filters" value="mergeStat" />  
        <property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>
	
	<!--多数据源配置 与 DynamicDataSource 对应-->  
    <bean id="dataSource" class="com.mylog.common.DynamicDataSource">  
        <property name="defaultTargetDataSource" ref="sysDataSource"/>  
        <property name="targetDataSources">  
            <map>  
                <entry key="sysDataSource" value-ref="sysDataSource"/>  
                <entry key="logDataSource" value-ref="logDataSource"/>  
            </map>  
        </property>  
    </bean>  
      
    <bean id="dataSourceExchange" class="com.mylog.code.annotation.DataSourceExchange"/>
    
</beans>